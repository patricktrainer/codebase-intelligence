{
  "metadata": {
    "generated_at": "2025-06-30T15:30:00Z",
    "analysis_version": "2.0",
    "total_nodes": 89,
    "codebase_path": "/Users/patricktrainer/github/codebase-intelligence",
    "analysis_scope": "complete"
  },
  "modules": [
    {
      "id": "codebase_intelligence",
      "type": "package",
      "name": "codebase_intelligence",
      "path": "codebase_intelligence/",
      "description": "Main package for Dagster-based codebase intelligence system",
      "complexity": "high",
      "is_entry_point": true,
      "lines_of_code": 28,
      "functions": 0,
      "classes": 0,
      "imports": 4
    },
    {
      "id": "codebase_intelligence.__init__",
      "type": "module",
      "name": "__init__",
      "path": "codebase_intelligence/__init__.py",
      "description": "Central Dagster definitions entry point with logging initialization",
      "complexity": "medium",
      "is_dagster_definitions": true,
      "lines_of_code": 28,
      "functions": 1,
      "classes": 0,
      "imports": 4,
      "key_components": ["Definitions", "setup_logging", "jobs", "assets", "resources", "schedules", "sensors"]
    },
    {
      "id": "codebase_intelligence.config",
      "type": "module",
      "name": "config",
      "path": "codebase_intelligence/config.py",
      "description": "Centralized configuration management with environment variable overrides",
      "complexity": "medium",
      "is_configuration": true,
      "lines_of_code": 75,
      "functions": 2,
      "classes": 1,
      "imports": 4,
      "config_sections": ["claude_code", "repository", "storage", "notifications", "logging"]
    },
    {
      "id": "codebase_intelligence.logging_config",
      "type": "module",
      "name": "logging_config",
      "path": "codebase_intelligence/logging_config.py",
      "description": "Centralized logging setup with rotating file handlers and singleton pattern",
      "complexity": "high",
      "is_singleton": true,
      "lines_of_code": 128,
      "functions": 3,
      "classes": 1,
      "imports": 5,
      "logging_features": ["rotating_file_handler", "console_handler", "module_loggers", "singleton_pattern"]
    },
    {
      "id": "codebase_intelligence.claude_integration",
      "type": "module",
      "name": "claude_integration",
      "path": "codebase_intelligence/claude_integration.py",
      "description": "Client for Claude Code CLI integration with async support",
      "complexity": "very_high",
      "is_external_integration": true,
      "lines_of_code": 178,
      "functions": 2,
      "classes": 2,
      "imports": 9,
      "integration_features": ["async_execution", "json_parsing", "ansi_cleaning", "timeout_handling", "error_handling"]
    },
    {
      "id": "codebase_intelligence.assets.assets",
      "type": "module",
      "name": "assets",
      "path": "codebase_intelligence/assets/assets.py",
      "description": "Core Dagster assets for orchestrating analysis workflows",
      "complexity": "very_high",
      "is_dagster_assets": true,
      "lines_of_code": 726,
      "functions": 8,
      "classes": 8,
      "imports": 19,
      "dagster_assets": 5,
      "sensors": 1,
      "schedules": 1,
      "key_workflows": ["continuous_analysis", "quality_audit", "knowledge_graph_maintenance"]
    },
    {
      "id": "codebase_intelligence.jobs.jobs",
      "type": "module",
      "name": "jobs",
      "path": "codebase_intelligence/jobs/jobs.py",
      "description": "Job definitions for different analysis workflows",
      "complexity": "medium",
      "is_dagster_jobs": true,
      "lines_of_code": 45,
      "functions": 0,
      "classes": 0,
      "imports": 12,
      "job_definitions": 3
    },
    {
      "id": "codebase_intelligence.utils.utils",
      "type": "module",
      "name": "utils",
      "path": "codebase_intelligence/utils/utils.py",
      "description": "Utilities for documentation management, knowledge graph storage, and code analysis",
      "complexity": "high",
      "is_utility": true,
      "lines_of_code": 328,
      "functions": 8,
      "classes": 3,
      "imports": 12,
      "utility_domains": ["documentation", "knowledge_graph", "code_analysis", "git_integration"]
    }
  ],
  "classes": [
    {
      "id": "SystemConfig",
      "type": "class",
      "name": "SystemConfig",
      "module": "codebase_intelligence.config",
      "description": "System-wide configuration management with YAML and environment variable support",
      "complexity": "medium",
      "lines_of_code": 61,
      "methods": ["__init__", "_load_config", "get"],
      "attributes": ["config_path", "config"],
      "responsibilities": ["config_loading", "environment_override", "dot_notation_access"],
      "design_patterns": ["configuration_object"]
    },
    {
      "id": "LoggingManager",
      "type": "class",
      "name": "LoggingManager",
      "module": "codebase_intelligence.logging_config",
      "description": "Singleton pattern for centralized logging management with rotating handlers",
      "complexity": "high",
      "is_singleton": true,
      "lines_of_code": 96,
      "methods": ["__new__", "__init__", "_setup_logging", "_configure_module_loggers", "get_logger", "set_level"],
      "attributes": ["_instance", "_configured", "config"],
      "responsibilities": ["singleton_management", "logging_configuration", "handler_setup", "level_management"],
      "design_patterns": ["singleton", "factory"]
    },
    {
      "id": "ClaudeCodeResult",
      "type": "class",
      "name": "ClaudeCodeResult",
      "module": "codebase_intelligence.claude_integration",
      "description": "Data class for Claude Code execution results with success/error states",
      "complexity": "low",
      "is_dataclass": true,
      "lines_of_code": 8,
      "methods": [],
      "attributes": ["success", "output", "error", "metadata"],
      "responsibilities": ["result_encapsulation", "error_handling", "metadata_storage"],
      "design_patterns": ["data_transfer_object"]
    },
    {
      "id": "ClaudeCodeClient",
      "type": "class",
      "name": "ClaudeCodeClient",
      "module": "codebase_intelligence.claude_integration",
      "description": "Client for interfacing with Claude Code CLI with async support and error handling",
      "complexity": "very_high",
      "is_external_client": true,
      "lines_of_code": 144,
      "methods": ["__init__", "_validate_setup", "execute_async", "execute"],
      "attributes": ["api_key", "timeout"],
      "responsibilities": ["cli_execution", "async_handling", "json_parsing", "ansi_cleaning", "error_management"],
      "design_patterns": ["client", "adapter", "async_wrapper"]
    },
    {
      "id": "DocumentationManager",
      "type": "class",
      "name": "DocumentationManager",
      "module": "codebase_intelligence.utils.utils",
      "description": "Handles documentation generation, file management, and index creation with security",
      "complexity": "high",
      "lines_of_code": 64,
      "methods": ["__init__", "write_documentation", "generate_index"],
      "attributes": ["docs_root", "logger"],
      "responsibilities": ["file_management", "security_validation", "index_generation", "backup_creation"],
      "design_patterns": ["manager", "security_wrapper"]
    },
    {
      "id": "KnowledgeGraphStore",
      "type": "class",
      "name": "KnowledgeGraphStore",
      "module": "codebase_intelligence.utils.utils",
      "description": "Manages graph storage with versioning, archival, and diff capabilities",
      "complexity": "high",
      "lines_of_code": 84,
      "methods": ["__init__", "save_graph", "load_graph", "get_graph_diff", "_get_next_version"],
      "attributes": ["store_path", "graph_file"],
      "responsibilities": ["version_management", "graph_persistence", "diff_calculation", "archival"],
      "design_patterns": ["repository", "versioning"]
    },
    {
      "id": "CodebaseAnalyzer",
      "type": "class",
      "name": "CodebaseAnalyzer",
      "module": "codebase_intelligence.utils.utils",
      "description": "Analyzes codebase structure with gitignore support and file metrics",
      "complexity": "very_high",
      "lines_of_code": 157,
      "methods": ["__init__", "_gitignore_to_regex", "get_source_files", "get_file_metrics", "_count_comment_lines", "find_dependencies"],
      "attributes": ["repo_path", "repo"],
      "responsibilities": ["file_discovery", "metrics_calculation", "dependency_analysis", "gitignore_parsing"],
      "design_patterns": ["analyzer", "strategy"]
    },
    {
      "id": "CodeChange",
      "type": "class",
      "name": "CodeChange",
      "module": "codebase_intelligence.assets.assets",
      "description": "Pydantic model for git commit representation with comprehensive metadata",
      "complexity": "low",
      "is_pydantic_model": true,
      "lines_of_code": 10,
      "methods": [],
      "attributes": ["commit_hash", "author", "timestamp", "files_changed", "additions", "deletions", "message", "diff_summary"],
      "responsibilities": ["commit_modeling", "data_validation"],
      "design_patterns": ["data_model", "validation"]
    },
    {
      "id": "ImpactAnalysis",
      "type": "class",
      "name": "ImpactAnalysis",
      "module": "codebase_intelligence.assets.assets",
      "description": "Pydantic model for change impact assessment with risk categorization",
      "complexity": "medium",
      "is_pydantic_model": true,
      "lines_of_code": 8,
      "methods": [],
      "attributes": ["architectural_changes", "breaking_changes", "new_patterns", "performance_implications", "affected_components", "risk_level"],
      "responsibilities": ["impact_modeling", "risk_assessment", "change_categorization"],
      "design_patterns": ["data_model", "validation"]
    },
    {
      "id": "DocumentationUpdate",
      "type": "class",
      "name": "DocumentationUpdate",
      "module": "codebase_intelligence.assets.assets",
      "description": "Pydantic model for documentation change tracking and management",
      "complexity": "low",
      "is_pydantic_model": true,
      "lines_of_code": 6,
      "methods": [],
      "attributes": ["file_path", "update_type", "content", "reason"],
      "responsibilities": ["update_modeling", "change_tracking"],
      "design_patterns": ["data_model", "validation"]
    },
    {
      "id": "CodeQualityIssue",
      "type": "class",
      "name": "CodeQualityIssue",
      "module": "codebase_intelligence.assets.assets",
      "description": "Pydantic model for quality issue representation with severity and categorization",
      "complexity": "medium",
      "is_pydantic_model": true,
      "lines_of_code": 7,
      "methods": [],
      "attributes": ["severity", "category", "file_path", "line_range", "description", "suggested_fix"],
      "responsibilities": ["issue_modeling", "severity_classification", "fix_suggestion"],
      "design_patterns": ["data_model", "validation"]
    },
    {
      "id": "KnowledgeGraphNode",
      "type": "class",
      "name": "KnowledgeGraphNode",
      "module": "codebase_intelligence.assets.assets",
      "description": "Pydantic model for graph node structure with relationship metadata",
      "complexity": "medium",
      "is_pydantic_model": true,
      "lines_of_code": 7,
      "methods": [],
      "attributes": ["id", "type", "name", "dependencies", "dependents", "metadata"],
      "responsibilities": ["node_modeling", "relationship_tracking", "metadata_management"],
      "design_patterns": ["data_model", "validation", "graph_node"]
    }
  ],
  "functions": [
    {
      "id": "json_serializer",
      "type": "function",
      "name": "json_serializer",
      "module": "codebase_intelligence.assets.assets",
      "description": "Custom JSON serializer for datetime objects",
      "complexity": "low",
      "lines_of_code": 4,
      "parameters": ["obj"],
      "responsibilities": ["datetime_serialization", "json_compatibility"],
      "is_utility": true
    },
    {
      "id": "safe_json_dumps",
      "type": "function",
      "name": "safe_json_dumps",
      "module": "codebase_intelligence.assets.assets",
      "description": "Safe JSON dumps wrapper that handles datetime objects",
      "complexity": "low",
      "lines_of_code": 2,
      "parameters": ["data", "**kwargs"],
      "responsibilities": ["safe_serialization", "datetime_handling"],
      "is_utility": true
    },
    {
      "id": "execute_claude_code",
      "type": "function",
      "name": "execute_claude_code",
      "module": "codebase_intelligence.assets.assets",
      "description": "Executes Claude Code with context and error handling",
      "complexity": "medium",
      "lines_of_code": 27,
      "parameters": ["prompt", "context", "config", "workspace_path"],
      "responsibilities": ["claude_execution", "error_handling", "logging"],
      "is_integration": true
    },
    {
      "id": "get_git_commits",
      "type": "function",
      "name": "get_git_commits",
      "module": "codebase_intelligence.assets.assets",
      "description": "Fetches git commits with comprehensive metadata extraction",
      "complexity": "high",
      "lines_of_code": 44,
      "parameters": ["repo_path", "since", "branch"],
      "responsibilities": ["git_integration", "commit_parsing", "metadata_extraction", "encoding_handling"],
      "is_integration": true
    },
    {
      "id": "setup_logging",
      "type": "function",
      "name": "setup_logging",
      "module": "codebase_intelligence.logging_config",
      "description": "Initialize logging configuration with optional config override",
      "complexity": "medium",
      "lines_of_code": 9,
      "parameters": ["config"],
      "responsibilities": ["logging_initialization", "config_override"],
      "is_initialization": true
    },
    {
      "id": "get_logger",
      "type": "function",
      "name": "get_logger",
      "module": "codebase_intelligence.logging_config",
      "description": "Convenience function to get configured logger instance",
      "complexity": "low",
      "lines_of_code": 2,
      "parameters": ["name"],
      "responsibilities": ["logger_factory", "convenience_wrapper"],
      "is_factory": true
    }
  ],
  "assets": [
    {
      "id": "code_changes",
      "type": "asset",
      "name": "code_changes",
      "module": "codebase_intelligence.assets.assets",
      "description": "Detects and analyzes git commits with Claude Code integration",
      "complexity": "high",
      "is_dagster_asset": true,
      "dependencies": [],
      "outputs": ["List[Dict[str, Any]]"],
      "partitioned": false,
      "lines_of_code": 95,
      "compute_kind": "claude_code",
      "responsibilities": ["git_analysis", "commit_detection", "claude_integration", "change_analysis"]
    },
    {
      "id": "impact_assessment",
      "type": "asset",
      "name": "impact_assessment",
      "module": "codebase_intelligence.assets.assets",
      "description": "Analyzes comprehensive impact of code changes with risk assessment",
      "complexity": "high",
      "is_dagster_asset": true,
      "dependencies": ["code_changes"],
      "outputs": ["Dict[str, Any]"],
      "partitioned": false,
      "lines_of_code": 107,
      "compute_kind": "claude_code",
      "responsibilities": ["impact_analysis", "risk_assessment", "change_categorization", "architectural_impact"]
    },
    {
      "id": "documentation_updates",
      "type": "asset",
      "name": "documentation_updates",
      "module": "codebase_intelligence.assets.assets",
      "description": "Generates and manages documentation based on impact analysis",
      "complexity": "high",
      "is_dagster_asset": true,
      "dependencies": ["impact_assessment"],
      "outputs": ["List[Dict[str, Any]]"],
      "partitioned": false,
      "lines_of_code": 77,
      "compute_kind": "claude_code",
      "responsibilities": ["documentation_generation", "file_management", "index_creation", "content_updates"]
    },
    {
      "id": "code_quality_audit",
      "type": "asset",
      "name": "code_quality_audit",
      "module": "codebase_intelligence.assets.assets",
      "description": "Performs comprehensive code quality audits with issue categorization",
      "complexity": "high",
      "is_dagster_asset": true,
      "dependencies": [],
      "outputs": ["List[Dict[str, Any]]"],
      "partitioned": true,
      "partition_def": "weekly",
      "lines_of_code": 72,
      "compute_kind": "claude_code",
      "responsibilities": ["quality_analysis", "issue_detection", "severity_assessment", "fix_suggestions"]
    },
    {
      "id": "codebase_knowledge_graph",
      "type": "asset",
      "name": "codebase_knowledge_graph",
      "module": "codebase_intelligence.assets.assets",
      "description": "Builds and maintains comprehensive codebase knowledge graph",
      "complexity": "very_high",
      "is_dagster_asset": true,
      "dependencies": ["code_changes", "impact_assessment"],
      "outputs": ["Dict[str, Any]"],
      "partitioned": false,
      "lines_of_code": 88,
      "compute_kind": "claude_code",
      "responsibilities": ["graph_construction", "relationship_analysis", "structure_mapping", "dependency_tracking"]
    }
  ],
  "jobs": [
    {
      "id": "continuous_analysis_job",
      "type": "job",
      "name": "continuous_analysis_job",
      "module": "codebase_intelligence.jobs.jobs",
      "description": "Triggered by code changes, executes full analysis pipeline",
      "complexity": "high",
      "is_dagster_job": true,
      "assets": ["code_changes", "impact_assessment", "documentation_updates", "codebase_knowledge_graph"],
      "trigger": "sensor",
      "execution_order": ["code_changes", "impact_assessment", "documentation_updates", "codebase_knowledge_graph"]
    },
    {
      "id": "quality_audit_job",
      "type": "job",
      "name": "quality_audit_job",
      "module": "codebase_intelligence.jobs.jobs",
      "description": "Scheduled comprehensive quality assessments",
      "complexity": "medium",
      "is_dagster_job": true,
      "assets": ["code_quality_audit"],
      "trigger": "schedule",
      "schedule": "weekly"
    },
    {
      "id": "full_analysis_job",
      "type": "job",
      "name": "full_analysis_job",
      "module": "codebase_intelligence.jobs.jobs",
      "description": "Complete codebase analysis including all assets",
      "complexity": "very_high",
      "is_dagster_job": true,
      "assets": ["code_changes", "impact_assessment", "documentation_updates", "code_quality_audit", "codebase_knowledge_graph"],
      "trigger": "manual",
      "execution_order": ["code_changes", "impact_assessment", "documentation_updates", "code_quality_audit", "codebase_knowledge_graph"]
    }
  ],
  "sensors_schedules": [
    {
      "id": "commit_sensor",
      "type": "sensor",
      "name": "commit_sensor",
      "module": "codebase_intelligence.assets.assets",
      "description": "Monitors git commits and triggers continuous analysis with file-based state tracking",
      "complexity": "medium",
      "is_dagster_sensor": true,
      "monitors": "git_repository",
      "triggers": ["continuous_analysis_job"],
      "state_management": "file_based",
      "status": "running"
    },
    {
      "id": "quality_audit_schedule",
      "type": "schedule",
      "name": "quality_audit_schedule",
      "module": "codebase_intelligence.assets.assets",
      "description": "Weekly cron-based quality audits on Sunday midnight",
      "complexity": "low",
      "is_dagster_schedule": true,
      "cron": "0 0 * * 0",
      "triggers": ["quality_audit_job"],
      "frequency": "weekly"
    }
  ],
  "configuration": [
    {
      "id": "config.yaml",
      "type": "config_file",
      "name": "config.yaml",
      "path": "config.yaml",
      "description": "System configuration with hierarchical structure",
      "complexity": "medium",
      "format": "yaml",
      "sections": ["claude_code", "repository", "storage", "notifications", "logging"],
      "override_precedence": "environment_variables"
    },
    {
      "id": ".env",
      "type": "config_file",
      "name": ".env",
      "path": ".env",
      "description": "Environment-specific settings and sensitive data",
      "complexity": "low",
      "format": "env",
      "is_secret": true,
      "contains": ["api_keys", "database_urls", "webhook_urls"]
    }
  ]
}