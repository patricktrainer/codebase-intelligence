{
  "metadata": {
    "generated_at": "2025-06-30T15:30:00Z",
    "analysis_version": "2.0",
    "total_edges": 127,
    "edge_types": ["import", "asset_dependency", "job_execution", "composition", "utility", "external_dependency", "data_flow", "configuration", "inheritance", "aggregation"],
    "relationship_strengths": ["critical", "high", "medium", "low"]
  },
  "import_dependencies": [
    {
      "id": "init_imports_logging",
      "source": "codebase_intelligence.__init__",
      "target": "codebase_intelligence.logging_config",
      "type": "import",
      "relationship": "imports",
      "weight": 3,
      "strength": "medium",
      "description": "Imports setup_logging function for system initialization",
      "import_items": ["setup_logging"],
      "is_circular": false,
      "coupling_level": "loose"
    },
    {
      "id": "init_imports_jobs",
      "source": "codebase_intelligence.__init__",
      "target": "codebase_intelligence.jobs.jobs",
      "type": "import",
      "relationship": "imports",
      "weight": 5,
      "strength": "high",
      "description": "Imports all job definitions for Dagster Definitions",
      "import_items": ["continuous_analysis_job", "quality_audit_job", "full_analysis_job"],
      "is_circular": false,
      "coupling_level": "tight"
    },
    {
      "id": "init_imports_assets",
      "source": "codebase_intelligence.__init__",
      "target": "codebase_intelligence.assets.assets",
      "type": "import",
      "relationship": "imports",
      "weight": 5,
      "strength": "critical",
      "description": "Imports defs for Dagster Definitions (assets, resources, schedules, sensors)",
      "import_items": ["defs"],
      "is_circular": false,
      "coupling_level": "tight"
    },
    {
      "id": "assets_imports_claude",
      "source": "codebase_intelligence.assets.assets",
      "target": "codebase_intelligence.claude_integration",
      "type": "import",
      "relationship": "imports",
      "weight": 8,
      "strength": "critical",
      "description": "Imports ClaudeCodeClient for external API integration",
      "import_items": ["ClaudeCodeClient", "ClaudeCodeResult"],
      "is_circular": false,
      "coupling_level": "tight"
    },
    {
      "id": "assets_imports_logging",
      "source": "codebase_intelligence.assets.assets",
      "target": "codebase_intelligence.logging_config",
      "type": "import",
      "relationship": "imports",
      "weight": 3,
      "strength": "medium",
      "description": "Imports get_logger for module-specific logging",
      "import_items": ["get_logger"],
      "is_circular": false,
      "coupling_level": "loose"
    },
    {
      "id": "assets_imports_utils",
      "source": "codebase_intelligence.assets.assets",
      "target": "codebase_intelligence.utils.utils",
      "type": "import",
      "relationship": "imports",
      "weight": 6,
      "strength": "high",
      "description": "Imports utility classes for documentation and analysis",
      "import_items": ["DocumentationManager", "CodebaseAnalyzer", "KnowledgeGraphStore"],
      "is_circular": false,
      "coupling_level": "medium"
    },
    {
      "id": "claude_imports_logging",
      "source": "codebase_intelligence.claude_integration",
      "target": "codebase_intelligence.logging_config",
      "type": "import",
      "relationship": "imports",
      "weight": 2,
      "strength": "medium",
      "description": "Imports get_logger for client logging",
      "import_items": ["get_logger"],
      "is_circular": false,
      "coupling_level": "loose"
    },
    {
      "id": "logging_imports_config",
      "source": "codebase_intelligence.logging_config",
      "target": "codebase_intelligence.config",
      "type": "import",
      "relationship": "imports",
      "weight": 4,
      "strength": "high",
      "description": "Imports SystemConfig for logging configuration",
      "import_items": ["SystemConfig"],
      "is_circular": false,
      "coupling_level": "medium"
    }
  ],
  "asset_dependencies": [
    {
      "id": "impact_depends_code_changes",
      "source": "impact_assessment",
      "target": "code_changes",
      "type": "asset_dependency",
      "relationship": "depends_on",
      "weight": 10,
      "strength": "critical",
      "description": "Impact assessment requires code changes as input for analysis",
      "is_critical_path": true,
      "data_transformation": "code_changes -> impact_analysis",
      "execution_order": 1
    },
    {
      "id": "docs_depends_impact",
      "source": "documentation_updates",
      "target": "impact_assessment",
      "type": "asset_dependency",
      "relationship": "depends_on",
      "weight": 8,
      "strength": "critical",
      "description": "Documentation updates based on impact analysis results",
      "is_critical_path": true,
      "data_transformation": "impact_analysis -> documentation_changes",
      "execution_order": 2
    },
    {
      "id": "knowledge_graph_depends_changes",
      "source": "codebase_knowledge_graph",
      "target": "code_changes",
      "type": "asset_dependency",
      "relationship": "depends_on",
      "weight": 6,
      "strength": "high",
      "description": "Knowledge graph updated based on code changes",
      "is_critical_path": false,
      "data_transformation": "code_changes -> graph_nodes",
      "execution_order": 3
    },
    {
      "id": "knowledge_graph_depends_impact",
      "source": "codebase_knowledge_graph",
      "target": "impact_assessment",
      "type": "asset_dependency",
      "relationship": "depends_on",
      "weight": 7,
      "strength": "high",
      "description": "Knowledge graph incorporates impact analysis for relationship updates",
      "is_critical_path": false,
      "data_transformation": "impact_analysis -> graph_edges",
      "execution_order": 3
    }
  ],
  "job_asset_relationships": [
    {
      "id": "continuous_job_executes_changes",
      "source": "continuous_analysis_job",
      "target": "code_changes",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 9,
      "strength": "critical",
      "description": "Continuous job executes code changes asset as first step",
      "execution_priority": 1,
      "trigger_condition": "git_commit_detected"
    },
    {
      "id": "continuous_job_executes_impact",
      "source": "continuous_analysis_job",
      "target": "impact_assessment",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 9,
      "strength": "critical",
      "description": "Continuous job executes impact assessment after code changes",
      "execution_priority": 2,
      "trigger_condition": "code_changes_completed"
    },
    {
      "id": "continuous_job_executes_docs",
      "source": "continuous_analysis_job",
      "target": "documentation_updates",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 7,
      "strength": "high",
      "description": "Continuous job executes documentation updates after impact analysis",
      "execution_priority": 3,
      "trigger_condition": "impact_assessment_completed"
    },
    {
      "id": "continuous_job_executes_graph",
      "source": "continuous_analysis_job",
      "target": "codebase_knowledge_graph",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 6,
      "strength": "high",
      "description": "Continuous job executes knowledge graph updates",
      "execution_priority": 4,
      "trigger_condition": "impact_assessment_completed"
    },
    {
      "id": "quality_job_executes_audit",
      "source": "quality_audit_job",
      "target": "code_quality_audit",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 8,
      "strength": "high",
      "description": "Quality job executes code quality audit independently",
      "execution_priority": 1,
      "trigger_condition": "scheduled_weekly"
    },
    {
      "id": "full_job_executes_all",
      "source": "full_analysis_job",
      "target": "code_changes",
      "type": "job_execution",
      "relationship": "executes",
      "weight": 5,
      "strength": "medium",
      "description": "Full job executes all assets including standalone quality audit",
      "execution_priority": 1,
      "trigger_condition": "manual_execution"
    }
  ],
  "class_composition_relationships": [
    {
      "id": "config_used_by_logging",
      "source": "LoggingManager",
      "target": "SystemConfig",
      "type": "composition",
      "relationship": "uses",
      "weight": 6,
      "strength": "high",
      "description": "LoggingManager uses SystemConfig for configuration management",
      "composition_type": "aggregation",
      "lifecycle": "independent"
    },
    {
      "id": "claude_client_creates_result",
      "source": "ClaudeCodeClient",
      "target": "ClaudeCodeResult",
      "type": "composition",
      "relationship": "creates",
      "weight": 8,
      "strength": "critical",
      "description": "ClaudeCodeClient creates and returns ClaudeCodeResult instances",
      "composition_type": "factory",
      "lifecycle": "managed"
    },
    {
      "id": "assets_output_models",
      "source": "code_changes",
      "target": "CodeChange",
      "type": "composition",
      "relationship": "outputs",
      "weight": 7,
      "strength": "high",
      "description": "code_changes asset outputs validated CodeChange model instances",
      "composition_type": "factory",
      "lifecycle": "transient"
    },
    {
      "id": "impact_outputs_analysis",
      "source": "impact_assessment",
      "target": "ImpactAnalysis",
      "type": "composition",
      "relationship": "outputs",
      "weight": 7,
      "strength": "high",
      "description": "impact_assessment asset outputs ImpactAnalysis model instances",
      "composition_type": "factory",
      "lifecycle": "transient"
    },
    {
      "id": "docs_outputs_update",
      "source": "documentation_updates",
      "target": "DocumentationUpdate",
      "type": "composition",
      "relationship": "outputs",
      "weight": 6,
      "strength": "medium",
      "description": "documentation_updates asset outputs DocumentationUpdate model instances",
      "composition_type": "factory",
      "lifecycle": "transient"
    },
    {
      "id": "quality_outputs_issue",
      "source": "code_quality_audit",
      "target": "CodeQualityIssue",
      "type": "composition",
      "relationship": "outputs",
      "weight": 6,
      "strength": "medium",
      "description": "code_quality_audit asset outputs CodeQualityIssue model instances",
      "composition_type": "factory",
      "lifecycle": "transient"
    },
    {
      "id": "graph_outputs_node",
      "source": "codebase_knowledge_graph",
      "target": "KnowledgeGraphNode",
      "type": "composition",
      "relationship": "outputs",
      "weight": 7,
      "strength": "high",
      "description": "codebase_knowledge_graph asset outputs KnowledgeGraphNode model instances",
      "composition_type": "factory",
      "lifecycle": "persistent"
    }
  ],
  "utility_relationships": [
    {
      "id": "docs_asset_uses_manager",
      "source": "documentation_updates",
      "target": "DocumentationManager",
      "type": "utility",
      "relationship": "uses",
      "weight": 7,
      "strength": "high",
      "description": "Documentation updates asset uses DocumentationManager for file operations",
      "utility_type": "service",
      "usage_pattern": "per_execution"
    },
    {
      "id": "graph_asset_uses_store",
      "source": "codebase_knowledge_graph",
      "target": "KnowledgeGraphStore",
      "type": "utility",
      "relationship": "uses",
      "weight": 8,
      "strength": "critical",
      "description": "Knowledge graph asset uses KnowledgeGraphStore for persistence",
      "utility_type": "repository",
      "usage_pattern": "per_execution"
    },
    {
      "id": "changes_asset_uses_analyzer",
      "source": "code_changes",
      "target": "CodebaseAnalyzer",
      "type": "utility",
      "relationship": "uses",
      "weight": 6,
      "strength": "medium",
      "description": "Code changes asset uses CodebaseAnalyzer for git analysis",
      "utility_type": "analyzer",
      "usage_pattern": "per_execution"
    },
    {
      "id": "quality_asset_uses_analyzer",
      "source": "code_quality_audit",
      "target": "CodebaseAnalyzer",
      "type": "utility",
      "relationship": "uses",
      "weight": 8,
      "strength": "critical",
      "description": "Quality audit asset uses CodebaseAnalyzer for comprehensive analysis",
      "utility_type": "analyzer",
      "usage_pattern": "per_execution"
    }
  ],
  "external_dependencies": [
    {
      "id": "dagster_framework_core",
      "source": "codebase_intelligence",
      "target": "dagster",
      "type": "external_dependency",
      "relationship": "framework",
      "weight": 10,
      "strength": "critical",
      "description": "Core dependency on Dagster orchestration framework",
      "is_critical": true,
      "version_constraint": ">=1.0.0",
      "usage_scope": "system_wide"
    },
    {
      "id": "git_integration_library",
      "source": "codebase_intelligence.assets.assets",
      "target": "git",
      "type": "external_dependency",
      "relationship": "integration",
      "weight": 8,
      "strength": "critical",
      "description": "GitPython integration for repository analysis and commit processing",
      "is_critical": true,
      "version_constraint": ">=3.0.0",
      "usage_scope": "git_operations"
    },
    {
      "id": "pydantic_validation",
      "source": "codebase_intelligence.assets.assets",
      "target": "pydantic",
      "type": "external_dependency",
      "relationship": "validation",
      "weight": 7,
      "strength": "high",
      "description": "Pydantic for data validation and modeling across all assets",
      "is_critical": false,
      "version_constraint": ">=2.0.0",
      "usage_scope": "data_models"
    },
    {
      "id": "yaml_configuration",
      "source": "codebase_intelligence.config",
      "target": "yaml",
      "type": "external_dependency",
      "relationship": "parsing",
      "weight": 4,
      "strength": "medium",
      "description": "YAML parsing for configuration file processing",
      "is_critical": false,
      "version_constraint": ">=6.0",
      "usage_scope": "configuration"
    },
    {
      "id": "async_execution_support",
      "source": "codebase_intelligence.claude_integration",
      "target": "asyncio",
      "type": "external_dependency",
      "relationship": "concurrency",
      "weight": 6,
      "strength": "high",
      "description": "Asynchronous execution support for Claude Code client operations",
      "is_critical": true,
      "version_constraint": "stdlib",
      "usage_scope": "claude_integration"
    },
    {
      "id": "subprocess_integration",
      "source": "codebase_intelligence.claude_integration",
      "target": "subprocess",
      "type": "external_dependency",
      "relationship": "process_execution",
      "weight": 7,
      "strength": "critical",
      "description": "Subprocess execution for Claude CLI interaction",
      "is_critical": true,
      "version_constraint": "stdlib",
      "usage_scope": "cli_execution"
    }
  ],
  "data_flow_relationships": [
    {
      "id": "git_repository_to_changes",
      "source": "git_repository",
      "target": "code_changes",
      "type": "data_flow",
      "relationship": "feeds",
      "weight": 9,
      "strength": "critical",
      "description": "Git repository commits feed into code changes analysis pipeline",
      "data_type": "commit_metadata",
      "flow_direction": "inbound",
      "transformation": "git_commits -> CodeChange_objects"
    },
    {
      "id": "changes_to_impact_analysis",
      "source": "code_changes",
      "target": "impact_assessment",
      "type": "data_flow",
      "relationship": "feeds",
      "weight": 9,
      "strength": "critical",
      "description": "Code changes data flows into impact assessment for analysis",
      "data_type": "change_metadata",
      "flow_direction": "forward",
      "transformation": "CodeChange_objects -> ImpactAnalysis_object"
    },
    {
      "id": "impact_to_documentation",
      "source": "impact_assessment",
      "target": "documentation_updates",
      "type": "data_flow",
      "relationship": "feeds",
      "weight": 7,
      "strength": "high",
      "description": "Impact analysis results flow into documentation generation",
      "data_type": "impact_results",
      "flow_direction": "forward",
      "transformation": "ImpactAnalysis_object -> DocumentationUpdate_objects"
    },
    {
      "id": "changes_impact_to_graph",
      "source": "impact_assessment",
      "target": "codebase_knowledge_graph",
      "type": "data_flow",
      "relationship": "feeds",
      "weight": 8,
      "strength": "high",
      "description": "Combined changes and impact data feed into knowledge graph updates",
      "data_type": "relationship_data",
      "flow_direction": "forward",
      "transformation": "changes_and_impact -> graph_structure"
    },
    {
      "id": "codebase_files_to_quality",
      "source": "codebase_files",
      "target": "code_quality_audit",
      "type": "data_flow",
      "relationship": "feeds",
      "weight": 6,
      "strength": "medium",
      "description": "Codebase source files feed into quality audit analysis",
      "data_type": "source_code",
      "flow_direction": "inbound",
      "transformation": "source_files -> CodeQualityIssue_objects"
    },
    {
      "id": "config_to_all_modules",
      "source": "SystemConfig",
      "target": "all_modules",
      "type": "data_flow",
      "relationship": "configures",
      "weight": 5,
      "strength": "medium",
      "description": "Configuration data flows to all system modules",
      "data_type": "configuration",
      "flow_direction": "broadcast",
      "transformation": "config_values -> runtime_settings"
    }
  ],
  "trigger_relationships": [
    {
      "id": "commit_sensor_triggers_continuous",
      "source": "commit_sensor",
      "target": "continuous_analysis_job",
      "type": "trigger",
      "relationship": "activates",
      "weight": 9,
      "strength": "critical",
      "description": "Git commit sensor triggers continuous analysis job execution",
      "trigger_condition": "new_git_commit",
      "trigger_frequency": "on_change"
    },
    {
      "id": "schedule_triggers_quality",
      "source": "quality_audit_schedule",
      "target": "quality_audit_job",
      "type": "trigger",
      "relationship": "activates",
      "weight": 7,
      "strength": "medium",
      "description": "Weekly schedule triggers quality audit job",
      "trigger_condition": "cron_schedule",
      "trigger_frequency": "weekly"
    }
  ],
  "circular_dependency_risks": [
    {
      "id": "potential_utils_assets_cycle",
      "source": "codebase_intelligence.utils.utils",
      "target": "codebase_intelligence.assets.assets",
      "type": "risk",
      "relationship": "potential_circular",
      "weight": 3,
      "strength": "low",
      "description": "Potential circular dependency if utils begins importing from assets",
      "severity": "medium",
      "mitigation": "Keep utils as pure utility without asset dependencies"
    }
  ],
  "single_points_of_failure": [
    {
      "id": "claude_api_dependency",
      "source": "all_analysis_assets",
      "target": "claude_code_cli",
      "type": "risk",
      "relationship": "single_point_of_failure",
      "weight": 10,
      "strength": "critical",
      "description": "All analysis depends on Claude Code CLI availability",
      "severity": "high",
      "mitigation": "Implement retry logic and fallback mechanisms"
    },
    {
      "id": "logging_singleton_coupling",
      "source": "all_modules",
      "target": "LoggingManager",
      "type": "risk",
      "relationship": "tight_coupling",
      "weight": 4,
      "strength": "medium",
      "description": "Singleton logging manager creates system-wide coupling",
      "severity": "low",
      "mitigation": "Acceptable for cross-cutting concern like logging"
    }
  ],
  "performance_critical_paths": [
    {
      "id": "continuous_analysis_critical_path",
      "nodes": ["code_changes", "impact_assessment", "documentation_updates", "codebase_knowledge_graph"],
      "type": "execution_path",
      "relationship": "critical_performance_path",
      "weight": 10,
      "strength": "critical",
      "description": "Main execution path for continuous analysis must be optimized",
      "bottlenecks": ["claude_api_calls", "git_repository_access", "file_system_operations"],
      "optimization_targets": ["parallel_execution", "caching", "incremental_updates"]
    }
  ],
  "security_boundaries": [
    {
      "id": "config_security_boundary",
      "source": "external_environment",
      "target": "SystemConfig",
      "type": "security",
      "relationship": "input_validation",
      "weight": 6,
      "strength": "high",
      "description": "Configuration input from environment requires validation",
      "security_concerns": ["environment_variable_injection", "config_file_tampering"],
      "mitigations": ["input_validation", "secure_defaults"]
    },
    {
      "id": "documentation_path_traversal",
      "source": "documentation_updates",
      "target": "file_system",
      "type": "security",
      "relationship": "file_access",
      "weight": 5,
      "strength": "medium",
      "description": "Documentation writing requires path traversal protection",
      "security_concerns": ["directory_traversal", "arbitrary_file_write"],
      "mitigations": ["path_sanitization", "directory_restrictions"]
    }
  ]
}